package Step3;

import java.util.Scanner;
import java.util.ArrayList;

public class Step3 { // Î£®ÎπÖÏä§ ÌÅêÎ∏å Íµ¨ÌòÑÌïòÍ∏∞
    Scanner sc = new Scanner(System.in);

    char[][] cubeFront = new char[3][3]; // ÏïûÎ©¥
    char[][] cubeUp = new char[3][3]; // ÏúóÎ©¥
    char[][] cubeLeft = new char[3][3]; // ÏôºÏ™ΩÎ©¥
    char[][] cubeRight = new char[3][3]; // Ïò§Î•∏Ï™ΩÎ©¥
    char[][] cubeDown = new char[3][3]; // ÏïÑÎû´Î©¥
    char[][] cubeBack = new char[3][3]; // Îí∑Î©¥

    public static void main(String[] args) {
        Step3 step3 = new Step3();
        System.out.println("üóù Î£®ÎπÖÏä§ ÌÅêÎ∏åÎ•º ÌíÄÏñ¥ Î≥¥ÏÑ∏Ïöî!");
        step3.initCube();
        step3.ready();
    }

    public void initCube() {
        char[][] initFront = new char[3][3];
        char[][] initUp = new char[3][3];
        char[][] initLeft = new char[3][3];
        char[][] initRight = new char[3][3];
        char[][] initDown = new char[3][3];
        char[][] initBack = new char[3][3];
        for (int i = 0; i < 3; i++) {
            initFront[i] = new char[]{'G', 'G', 'G'}; // initFront : Green
        }
        for (int i = 0; i < 3; i++) {
            initUp[i] = new char[]{'W', 'W', 'W'}; // initUp : White
        }
        for (int i = 0; i < 3; i++) {
            initLeft[i] = new char[]{'O', 'O', 'O'}; // initLeft : Orange
        }
        for (int i = 0; i < 3; i++) {
            initRight[i] = new char[]{'R', 'R', 'R'}; // initRight : Red
        }
        for (int i = 0; i < 3; i++) {
            initDown[i] = new char[]{'Y', 'Y', 'Y'}; // initDown : Yellow
        }
        for (int i = 0; i < 3; i++) {
            initBack[i] = new char[]{'B', 'B', 'B'}; // initBack : Blue
        }
        cubeFront = initFront;
        cubeUp = initUp;
        cubeLeft = initLeft;
        cubeRight = initRight;
        cubeDown = initDown;
        cubeBack = initBack;
    }

    public void ready() {
        printCube();
        String input = start();
        ArrayList<String> inputList = trimInput(input);
        checkInput(inputList);
    }

    public void printCube() {
        System.out.println("‚Üì ÌòÑÏû¨ ÌÅêÎ∏å");
        for (int i = 0; i < 3; i++) {
            System.out.printf("%n %6c %1c %1c %1c %6c", ' ', cubeUp[i][0], cubeUp[i][1], cubeUp[i][2], ' ');
        }
        for (int i = 0; i < 3; i++) {
            System.out.printf("%n %1c %1c %1c  %1c %1c %1c  %1c %1c %1c  %1c %1c %1c",
                    cubeLeft[i][0], cubeLeft[i][1], cubeLeft[i][2],
                    cubeFront[i][0], cubeFront[i][1], cubeFront[i][2],
                    cubeRight[i][0], cubeRight[i][1], cubeRight[i][2],
                    cubeBack[i][0], cubeBack[i][1], cubeBack[i][2]);
        }
        System.out.printf("%n %6c %1c %1c %1c %15c %1c%1c", ' ', cubeDown[0][0], cubeDown[0][1], cubeDown[0][2], ' ', ' ', 'U');
        System.out.printf("%n %6c %1c %1c %1c %15c %1c%1c%1c%1c", ' ', cubeDown[1][0], cubeDown[1][1], cubeDown[1][2], ' ', 'L', 'F', 'R', 'B');
        System.out.printf("%n %6c %1c %1c %1c %15c %1c%1c", ' ', cubeDown[2][0], cubeDown[2][1], cubeDown[2][2], ' ', ' ', 'D');
    }

    public String start() {
        System.out.println("\n‚ùì ------------------------- ‚Üó „ÄåÏ†ÑÍ∞úÎèÑ ÎèÑÏõÄÎßê„Äç ------------------------------");
        System.out.println(">>   U = Up = ÏúóÎ©¥, L = Left = ÏôºÏ™Ω Î©¥, F = Front = ÏïûÎ©¥, ");
        System.out.println(">>   R = Right = Ïò§Î•∏Ï™Ω Î©¥, B = Back = Îí∑Î©¥, D = Down = ÏïÑÎû´Î©¥ÏùÑ ÎúªÌï©ÎãàÎã§.");
        System.out.println("--------------------------------------------------------------------------");
        System.out.println("üëâ ÏïÑÎûò Î™ÖÎ†πÏñ¥Ïóê Îî∞Îùº, Ï†ïÌï¥ÏßÑ Î©¥Ïùò Ï†ïÌï¥ÏßÑ Î∞©Ìñ•ÏúºÎ°ú '1/4Î∞îÌÄ¥' ÎèåÏïÑÍ∞ëÎãàÎã§.");
        System.out.println("U : ÏúóÎ©¥ÏùÑ ÏãúÍ≥ÑÎ∞©Ìñ•ÏúºÎ°ú 1/4 ÌöåÏ†Ñ, U' : ÏúóÏ™Ω Î©¥ÏùÑ Î∞òÏãúÍ≥ÑÎ∞©Ìñ•ÏúºÎ°ú 1/4 ÌöåÏ†Ñ");
        System.out.println("F : ÏïûÎ©¥ÏùÑ ÏãúÍ≥ÑÎ∞©Ìñ•ÏúºÎ°ú 1/4 ÌöåÏ†Ñ, F' : ÏïûÏ™Ω Î©¥ÏùÑ Î∞òÏãúÍ≥ÑÎ∞©Ìñ•ÏúºÎ°ú 1/4 ÌöåÏ†Ñ");
        System.out.println("L : ÏôºÏ™Ω Î©¥ÏùÑ ÏãúÍ≥ÑÎ∞©Ìñ•ÏúºÎ°ú 1/4 ÌöåÏ†Ñ, L' : ÏôºÏ™Ω Î©¥ÏùÑ Î∞òÏãúÍ≥ÑÎ∞©Ìñ•ÏúºÎ°ú 1/4 ÌöåÏ†Ñ");
        System.out.println("R : Ïò§Î•∏Ï™Ω Î©¥ÏùÑ ÏãúÍ≥ÑÎ∞©Ìñ•ÏúºÎ°ú 1/4 ÌöåÏ†Ñ, R' : Ïò§Î•∏Ï™Ω Î©¥ÏùÑ Î∞òÏãúÍ≥ÑÎ∞©Ìñ•ÏúºÎ°ú 1/4 ÌöåÏ†Ñ");
        System.out.println("B : Îí∑Î©¥ÏùÑ ÏãúÍ≥ÑÎ∞©Ìñ•ÏúºÎ°ú 1/4 ÌöåÏ†Ñ, B' : Îí∑Î©¥ÏùÑ Î∞òÏãúÍ≥ÑÎ∞©Ìñ•ÏúºÎ°ú 1/4 ÌöåÏ†Ñ");
        System.out.println("D : ÏïÑÎû´Î©¥ÏùÑ ÏãúÍ≥ÑÎ∞©Ìñ•ÏúºÎ°ú 1/4 ÌöåÏ†Ñ, D' : ÏïÑÎû´Î©¥ÏùÑ Î∞òÏãúÍ≥ÑÎ∞©Ìñ•ÏúºÎ°ú 1/4 ÌöåÏ†Ñ");
        System.out.println("üëâ ÏïÑÎûò Î™ÖÎ†πÏñ¥Ïóê Îî∞Îùº, Ï†ïÌï¥ÏßÑ Î©¥Ïùò Ï†ïÌï¥ÏßÑ Î∞©Ìñ•ÏúºÎ°ú '1/2Î∞îÌÄ¥' ÎèåÏïÑÍ∞ëÎãàÎã§.");
        System.out.println("U2 : ÏúóÎ©¥ÏùÑ ÏãúÍ≥ÑÎ∞©Ìñ•ÏúºÎ°ú 1/2 ÌöåÏ†Ñ");
        System.out.println("L2 : ÏôºÏ™Ω Î©¥ÏùÑ ÏãúÍ≥ÑÎ∞©Ìñ•ÏúºÎ°ú 1/2 ÌöåÏ†Ñ");
        System.out.println("F2 : ÏïûÎ©¥ÏùÑ ÏãúÍ≥ÑÎ∞©Ìñ•ÏúºÎ°ú 1/2 ÌöåÏ†Ñ");
        System.out.println("R2 : Ïò§Î•∏Ï™Ω Î©¥ÏùÑ ÏãúÍ≥ÑÎ∞©Ìñ•ÏúºÎ°ú 1/2 ÌöåÏ†Ñ");
        System.out.println("B2 : Îí∑Î©¥ÏùÑ ÏãúÍ≥ÑÎ∞©Ìñ•ÏúºÎ°ú 1/2 ÌöåÏ†Ñ");
        System.out.println("D2 : ÏïÑÎû´Î©¥ÏùÑ ÏãúÍ≥ÑÎ∞©Ìñ•ÏúºÎ°ú 1/2 ÌöåÏ†Ñ");
        System.out.println("‚õî Q Î•º ÏûÖÎ†•ÌïòÎ©¥ ÌîÑÎ°úÍ∑∏Îû®Ïù¥ Ï¢ÖÎ£åÎê©ÎãàÎã§.");
        System.out.print("CUBE > ");
        String input = sc.nextLine();
        return input;
    }

    public ArrayList<String> trimInput(String input) { // ÏûÖÎ†•Í∞í Îã§Îì¨Í∏∞
        String[] inputArr = input.split("");
        int inputArrLength = inputArr.length;
        ArrayList<String> inputList = new ArrayList<>();
        for (int i = 0; i < inputArrLength; i++) { // ÏöîÏÜåÍ∞Ä 'ÎÇò 2Ïù¥Î©¥ ÏßÅÏ†Ñ ÏöîÏÜåÏóê 'ÎÇò 2Î•º Î∂ôÏù¥Í∏∞
            String inputElement = inputArr[i];
            if (inputElement.equals("'")) {
                inputArr[i - 1] = inputArr[i - 1] + "'";
            }
            if (inputElement.equals("2")) {
                inputArr[i - 1] = inputArr[i - 1] + "2";
            }
        }
        for (int i = 0; i < inputArrLength; i++) { // ÏöîÏÜåÍ∞Ä 'Ïù¥ ÏïÑÎãàÍ≥† 2Í∞Ä ÏïÑÎãê Îïå inputListÏóê Ï∂îÍ∞Ä
            String inputElement = inputArr[i];
            if (!inputElement.equals("'") && !inputElement.equals("2")) {
                inputList.add(inputElement);
            }
        }
        return inputList;
    }

    public void checkInput(ArrayList<String> inputList) {
        int inputListSize = inputList.size();
        for (int i = 0; i < inputListSize; i++) {
            String anInput = inputList.get(i);
            if (anInput.equals("U") || anInput.equals("U'") || anInput.equals("F") || anInput.equals("F'")
                    || anInput.equals("L") || anInput.equals("L'") || anInput.equals("R") || anInput.equals("R'")
                    || anInput.equals("B") || anInput.equals("B'") || anInput.equals("D") || anInput.equals("D'")
                    || anInput.equals("U2") || anInput.equals("L2") || anInput.equals("F2") || anInput.equals("R2")
                    || anInput.equals("B2") || anInput.equals("D2") || anInput.equals("Q")) {
                guideInput(anInput);
            } else {
                System.out.println("‚ùó ÏßÄÏ†ïÎêòÏßÄ ÏïäÏùÄ Î™ÖÎ†πÏñ¥Í∞Ä Ìè¨Ìï®ÎêòÏñ¥ ÏûàÏäµÎãàÎã§. Îã§Ïãú ÏûÖÎ†•Ìï¥ Ï£ºÏÑ∏Ïöî.");
                String reInput = start();
                ArrayList<String> reInputList = trimInput(reInput);
                checkInput(reInputList);
            }
            if (i == (inputListSize - 1)) {
                ready();
            }
        }
        // ready(); - Ïù¥Î†áÍ≤å Í≥†Ï≥êÎèÑ ÎèôÏùº?
    }

    public void guideInput(String anInput) {
        char[][] tempFront = new char[3][3];
        char[][] tempUp = new char[3][3];
        char[][] tempLeft = new char[3][3];
        char[][] tempRight = new char[3][3];
        char[][] tempDown = new char[3][3];
        char[][] tempBack = new char[3][3];
        switch (anInput) {
            case "U":
            case "U2":
                whenU(tempUp, tempLeft, tempFront, tempRight, tempBack);
                if (anInput.equals("U2")) whenU(tempUp, tempLeft, tempFront, tempRight, tempBack);
                break;
            case "U'":
                whenUDot(tempUp, tempLeft, tempFront, tempRight, tempBack);
                break;
            case "F":
            case "F2":
                whenF(tempFront, tempUp, tempLeft, tempRight, tempDown);
                if (anInput.equals("F2")) whenF(tempFront, tempUp, tempLeft, tempRight, tempDown);
                break;
            case "F'":
                whenFDot(tempFront, tempUp, tempLeft, tempRight, tempDown);
                break;
            case "L":
            case "L2":
                whenL(tempLeft, tempUp, tempFront, tempDown, tempBack);
                if (anInput.equals("L2")) whenL(tempLeft, tempUp, tempFront, tempDown, tempBack);
                break;
            case "L'":
                whenLDot(tempLeft, tempUp, tempFront, tempDown, tempBack);
                break;
            case "R":
            case "R2":
                whenR(tempRight, tempUp, tempFront, tempDown, tempBack);
                if (anInput.equals("R2")) whenR(tempRight, tempUp, tempFront, tempDown, tempBack);
                break;
            case "R'":
                whenRDot(tempRight, tempUp, tempFront, tempDown, tempBack);
                break;
            case "B":
            case "B2":
                whenB(tempBack, tempUp, tempLeft, tempRight, tempDown);
                if (anInput.equals("B2")) whenB(tempBack, tempUp, tempLeft, tempRight, tempDown);
                break;
            case "B'":
                whenBDot(tempBack, tempUp, tempLeft, tempRight, tempDown);
                break;
            case "D":
            case "D2":
                whenD(tempDown, tempLeft, tempFront, tempRight, tempBack);
                if (anInput.equals("D2")) whenD(tempDown, tempLeft, tempFront, tempRight, tempBack);
                break;
            case "D'":
                whenDDot(tempDown, tempLeft, tempFront, tempRight, tempBack);
                break;
            case "Q":
                sc.close();
                System.out.println("Ï¢ÖÎ£åÎ©îÏãúÏßÄ");
                System.exit(0);
                break;
        }
        // printCube();
        System.out.println(); // Ï§ÑÎ∞îÍøà
    }

    public void copyAtoB(char[][] cubeA, char[][] cubeB) { // AÎ•º BÏóê Î≥µÏÇ¨
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                cubeB[i][j] = cubeA[i][j];
            }
        }
    }

    public void copyToTemp(){

    }

    public void copyToCube(){ //ÌååÎùºÎØ∏ÌÑ∞5Í∞ú
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                //cubeB[i][j] = cubeA[i][j];
            }
        }
    }

    public void clockWise(char[][] temp, char[][] cube) { // Ìï¥Îãπ Î©¥ cubeÎ•º ÏãúÍ≥ÑÎ∞©Ìñ•ÏúºÎ°ú 1/4 ÌöåÏ†ÑÌï¥ tempÏóê ÎåÄÏûÖ.
        temp[0][0] = cube[2][0];
        temp[0][1] = cube[1][0];
        temp[0][2] = cube[0][0];
        temp[1][0] = cube[2][1];
        temp[1][2] = cube[0][1];
        temp[2][0] = cube[2][2];
        temp[2][1] = cube[1][2];
        temp[2][2] = cube[0][2];
    }

    public void counterClockWise(char[][] temp, char[][] cube) { // Ìï¥Îãπ Î©¥ cubeÎ•º ÏãúÍ≥ÑÎ∞©Ìñ•ÏúºÎ°ú 1/4 ÌöåÏ†ÑÌï¥ tempÏóê ÎåÄÏûÖ.
        temp[0][0] = cube[0][2];
        temp[0][1] = cube[1][2];
        temp[0][2] = cube[2][2];
        temp[1][0] = cube[0][1];
        temp[1][2] = cube[2][1];
        temp[2][0] = cube[0][0];
        temp[2][1] = cube[1][0];
        temp[2][2] = cube[2][0];
    }

    public void whenU(char[][] tempUp, char[][] tempLeft, char[][] tempFront, char[][] tempRight, char[][] tempBack) {
        System.out.println("U : ÏúóÏ™Ω Î©¥ÏùÑ ÏãúÍ≥ÑÎ∞©Ìñ•ÏúºÎ°ú 1/4 ÌöåÏ†Ñ");
        copyAtoB(cubeUp, tempUp); // ÏûÑÏãúÎ≥ÄÏàòÏóê cube ÎÇ¥Ïö© Î≥µÏÇ¨
        copyAtoB(cubeLeft, tempLeft);
        copyAtoB(cubeFront, tempFront);
        copyAtoB(cubeRight, tempRight);
        copyAtoB(cubeBack, tempBack);
        clockWise(tempUp, cubeUp);// UÎ©¥ ÏãúÍ≥ÑÎ∞©Ìñ• 1/4 ÌöåÏ†Ñ
        tempLeft[0][0] = cubeFront[0][0]; // UÎ©¥Ïùò ÏòÜÎ©¥ - LÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempLeft[0][1] = cubeFront[0][1];
        tempLeft[0][2] = cubeFront[0][2];
        tempBack[0][0] = cubeLeft[0][0];// UÎ©¥Ïùò ÏòÜÎ©¥ - BÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempBack[0][1] = cubeLeft[0][1];
        tempBack[0][2] = cubeLeft[0][2];
        tempFront[0][0] = cubeRight[0][0];// UÎ©¥Ïùò ÏòÜÎ©¥ - FÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempFront[0][1] = cubeRight[0][1];
        tempFront[0][2] = cubeRight[0][2];
        tempRight[0][0] = cubeBack[0][0];// UÎ©¥Ïùò ÏòÜÎ©¥ - RÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempRight[0][1] = cubeBack[0][1];
        tempRight[0][2] = cubeBack[0][2];
        copyAtoB(tempUp, cubeUp); // Î∞îÎÄê ÏûÑÏãúÎ≥ÄÏàòÎ•º cubeÏóê Î≥µÏÇ¨
        copyAtoB(tempLeft, cubeLeft);
        copyAtoB(tempFront, cubeFront);
        copyAtoB(tempRight, cubeRight);
        copyAtoB(tempBack, cubeBack);
    }

    public void whenUDot(char[][] tempUp, char[][] tempLeft, char[][] tempFront, char[][] tempRight, char[][] tempBack) {
        System.out.println("U' : ÏúóÏ™Ω Î©¥ÏùÑ Î∞òÏãúÍ≥ÑÎ∞©Ìñ•ÏúºÎ°ú 1/4 ÌöåÏ†Ñ");
        copyAtoB(cubeUp, tempUp); //ÏûÑÏãúÎ≥ÄÏàòÏóê cube ÎÇ¥Ïö© Î≥µÏÇ¨
        copyAtoB(cubeLeft, tempLeft);
        copyAtoB(cubeFront, tempFront);
        copyAtoB(cubeRight, tempRight);
        copyAtoB(cubeBack, tempBack);
        counterClockWise(tempUp, cubeUp);// UÎ©¥ Î∞òÏãúÍ≥ÑÎ∞©Ìñ• 1/4 ÌöåÏ†Ñ
        tempLeft[0][0] = cubeBack[0][0]; // UÎ©¥Ïùò ÏòÜÎ©¥ - LÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempLeft[0][1] = cubeBack[0][1];
        tempLeft[0][2] = cubeBack[0][2];
        tempFront[0][0] = cubeLeft[0][0];// UÎ©¥Ïùò ÏòÜÎ©¥ - FÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempFront[0][1] = cubeLeft[0][1];
        tempFront[0][2] = cubeLeft[0][2];
        tempRight[0][0] = cubeFront[0][0];// UÎ©¥Ïùò ÏòÜÎ©¥ - RÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempRight[0][1] = cubeFront[0][1];
        tempRight[0][2] = cubeFront[0][2];
        tempBack[0][0] = cubeRight[0][0];// UÎ©¥Ïùò ÏòÜÎ©¥ - BÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempBack[0][1] = cubeRight[0][1];
        tempBack[0][2] = cubeRight[0][2];
        copyAtoB(tempUp, cubeUp); // Î∞îÎÄê ÏûÑÏãúÎ≥ÄÏàòÎ•º cubeÏóê Î≥µÏÇ¨
        copyAtoB(tempLeft, cubeLeft);
        copyAtoB(tempFront, cubeFront);
        copyAtoB(tempRight, cubeRight);
        copyAtoB(tempBack, cubeBack);
    }

    public void whenF(char[][] tempFront, char[][] tempUp, char[][] tempLeft, char[][] tempRight, char[][] tempDown) {
        System.out.println("F : ÏïûÏ™Ω Î©¥ÏùÑ ÏãúÍ≥ÑÎ∞©Ìñ•ÏúºÎ°ú 1/4 ÌöåÏ†Ñ");
        copyAtoB(cubeFront, tempFront);// ÏûÑÏãúÎ≥ÄÏàòÏóê cube ÎÇ¥Ïö© Î≥µÏÇ¨
        copyAtoB(cubeUp, tempUp);
        copyAtoB(cubeLeft, tempLeft);
        copyAtoB(cubeRight, tempRight);
        copyAtoB(cubeDown, tempDown);
        clockWise(tempFront, cubeFront);// FÎ©¥ ÏãúÍ≥ÑÎ∞©Ìñ• 1/4 ÌöåÏ†Ñ
        tempUp[2][0] = cubeLeft[2][2];// FÎ©¥Ïùò ÏòÜÎ©¥ - UÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempUp[2][1] = cubeLeft[1][2];
        tempUp[2][2] = cubeLeft[0][2];
        tempLeft[0][2] = cubeDown[0][0]; // FÎ©¥Ïùò ÏòÜÎ©¥ - LÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempLeft[1][2] = cubeDown[0][1];
        tempLeft[2][2] = cubeDown[0][2];
        tempRight[0][0] = cubeUp[2][0];// FÎ©¥Ïùò ÏòÜÎ©¥ - RÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempRight[1][0] = cubeUp[2][1];
        tempRight[2][0] = cubeUp[2][2];
        tempDown[0][0] = cubeRight[2][0];// FÎ©¥Ïùò ÏòÜÎ©¥ - DÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempDown[0][1] = cubeRight[1][0];
        tempDown[0][2] = cubeRight[0][0];
        copyAtoB(tempFront, cubeFront); // Î∞îÎÄê ÏûÑÏãúÎ≥ÄÏàòÎ•º cubeÏóê Î≥µÏÇ¨
        copyAtoB(tempUp, cubeUp);
        copyAtoB(tempLeft, cubeLeft);
        copyAtoB(tempRight, cubeRight);
        copyAtoB(tempDown, cubeDown);
    }

    public void whenFDot(char[][] tempFront, char[][] tempUp, char[][] tempLeft, char[][] tempRight, char[][] tempDown) {
        System.out.println("F' : ÏïûÏ™Ω Î©¥ÏùÑ Î∞òÏãúÍ≥ÑÎ∞©Ìñ•ÏúºÎ°ú 1/4 ÌöåÏ†Ñ");
        copyAtoB(cubeFront, tempFront); // ÏûÑÏãúÎ≥ÄÏàòÏóê cube ÎÇ¥Ïö© Î≥µÏÇ¨
        copyAtoB(cubeUp, tempUp);
        copyAtoB(cubeLeft, tempLeft);
        copyAtoB(cubeRight, tempRight);
        copyAtoB(cubeDown, tempDown);
        counterClockWise(tempFront, cubeFront);// FÎ©¥ Î∞òÏãúÍ≥ÑÎ∞©Ìñ• 1/4 ÌöåÏ†Ñ
        tempUp[2][0] = cubeRight[0][0];// FÎ©¥Ïùò ÏòÜÎ©¥ - UÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempUp[2][1] = cubeRight[1][0];
        tempUp[2][2] = cubeRight[2][0];
        tempLeft[0][2] = cubeUp[2][2]; // FÎ©¥Ïùò ÏòÜÎ©¥ - LÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempLeft[1][2] = cubeUp[2][1];
        tempLeft[2][2] = cubeUp[2][0];
        tempRight[0][0] = cubeDown[0][2];// FÎ©¥Ïùò ÏòÜÎ©¥ - RÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempRight[1][0] = cubeDown[0][1];
        tempRight[2][0] = cubeDown[0][0];
        tempDown[0][0] = cubeLeft[0][2];// FÎ©¥Ïùò ÏòÜÎ©¥ - DÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempDown[0][1] = cubeLeft[1][2];
        tempDown[0][2] = cubeLeft[2][2];
        copyAtoB(tempFront, cubeFront);// Î∞îÎÄê ÏûÑÏãúÎ≥ÄÏàòÎ•º cubeÏóê Î≥µÏÇ¨
        copyAtoB(tempUp, cubeUp);
        copyAtoB(tempLeft, cubeLeft);
        copyAtoB(tempRight, cubeRight);
        copyAtoB(tempDown, cubeDown);
    }

    public void whenL(char[][] tempLeft, char[][] tempUp, char[][] tempFront, char[][] tempDown, char[][] tempBack) {
        System.out.println("L : ÏôºÏ™Ω Î©¥ÏùÑ ÏãúÍ≥ÑÎ∞©Ìñ•ÏúºÎ°ú 1/4 ÌöåÏ†Ñ");
        copyAtoB(cubeLeft, tempLeft);// ÏûÑÏãúÎ≥ÄÏàòÏóê cube ÎÇ¥Ïö© Î≥µÏÇ¨
        copyAtoB(cubeUp, tempUp);
        copyAtoB(cubeFront, tempFront);
        copyAtoB(cubeDown, tempDown);
        copyAtoB(cubeBack, tempBack);
        clockWise(tempLeft, cubeLeft);// LÎ©¥ ÏãúÍ≥ÑÎ∞©Ìñ• 1/4 ÌöåÏ†Ñ
        tempUp[0][0] = cubeBack[2][2];// LÎ©¥Ïùò ÏòÜÎ©¥ - UÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempUp[1][0] = cubeBack[1][2];
        tempUp[2][0] = cubeBack[0][2];
        tempFront[0][0] = cubeUp[0][0];// LÎ©¥Ïùò ÏòÜÎ©¥ - FÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempFront[1][0] = cubeUp[1][0];
        tempFront[2][0] = cubeUp[2][0];
        tempDown[0][0] = cubeFront[0][0];// LÎ©¥Ïùò ÏòÜÎ©¥ - DÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempDown[1][0] = cubeFront[1][0];
        tempDown[2][0] = cubeFront[2][0];
        tempBack[0][2] = cubeDown[2][0]; // LÎ©¥Ïùò ÏòÜÎ©¥ - BÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempBack[1][2] = cubeDown[1][0];
        tempBack[2][2] = cubeDown[0][0];
        copyAtoB(tempLeft, cubeLeft);// Î∞îÎÄê ÏûÑÏãúÎ≥ÄÏàòÎ•º cubeÏóê Î≥µÏÇ¨
        copyAtoB(tempUp, cubeUp);
        copyAtoB(tempFront, cubeFront);
        copyAtoB(tempDown, cubeDown);
        copyAtoB(tempBack, cubeBack);
    }

    public void whenLDot(char[][] tempLeft, char[][] tempUp, char[][] tempFront, char[][] tempDown, char[][] tempBack) {
        System.out.println("L' : ÏôºÏ™Ω Î©¥ÏùÑ Î∞òÏãúÍ≥ÑÎ∞©Ìñ•ÏúºÎ°ú 1/4 ÌöåÏ†Ñ");
        copyAtoB(cubeLeft, tempLeft);// ÏûÑÏãúÎ≥ÄÏàòÏóê cube ÎÇ¥Ïö© Î≥µÏÇ¨
        copyAtoB(cubeUp, tempUp);
        copyAtoB(cubeFront, tempFront);
        copyAtoB(cubeDown, tempDown);
        copyAtoB(cubeBack, tempBack);
        counterClockWise(tempLeft, cubeLeft);// LÎ©¥ Î∞òÏãúÍ≥ÑÎ∞©Ìñ• 1/4 ÌöåÏ†Ñ
        tempUp[0][0] = cubeFront[0][0];// LÎ©¥Ïùò ÏòÜÎ©¥ - UÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempUp[1][0] = cubeFront[1][0];
        tempUp[2][0] = cubeFront[2][0];
        tempFront[0][0] = cubeDown[0][0]; // LÎ©¥Ïùò ÏòÜÎ©¥ - FÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempFront[1][0] = cubeDown[1][0];
        tempFront[2][0] = cubeDown[2][0];
        tempDown[0][0] = cubeBack[2][2];// LÎ©¥Ïùò ÏòÜÎ©¥ - DÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempDown[1][0] = cubeBack[1][2];
        tempDown[2][0] = cubeBack[0][2];
        tempBack[0][2] = cubeUp[2][0];// LÎ©¥Ïùò ÏòÜÎ©¥ - BÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempBack[1][2] = cubeUp[1][0];
        tempBack[2][2] = cubeUp[0][0];
        copyAtoB(tempLeft, cubeLeft);// Î∞îÎÄê ÏûÑÏãúÎ≥ÄÏàòÎ•º cubeÏóê Î≥µÏÇ¨
        copyAtoB(tempUp, cubeUp);
        copyAtoB(tempFront, cubeFront);
        copyAtoB(tempDown, cubeDown);
        copyAtoB(tempBack, cubeBack);
    }

    public void whenR(char[][] tempRight, char[][] tempUp, char[][] tempFront, char[][] tempDown, char[][] tempBack) {
        System.out.println("R : Ïò§Î•∏Ï™Ω Î©¥ÏùÑ ÏãúÍ≥ÑÎ∞©Ìñ•ÏúºÎ°ú 1/4 ÌöåÏ†Ñ");
        copyAtoB(cubeRight, tempRight);// ÏûÑÏãúÎ≥ÄÏàòÏóê cube ÎÇ¥Ïö© Î≥µÏÇ¨
        copyAtoB(cubeUp, tempUp);
        copyAtoB(cubeFront, tempFront);
        copyAtoB(cubeDown, tempDown);
        copyAtoB(cubeBack, tempBack);
        clockWise(tempRight, cubeRight);// RÎ©¥ ÏãúÍ≥ÑÎ∞©Ìñ• 1/4 ÌöåÏ†Ñ
        tempUp[0][2] = cubeFront[0][2];// RÎ©¥Ïùò ÏòÜÎ©¥ - UÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempUp[1][2] = cubeFront[1][2];
        tempUp[2][2] = cubeFront[2][2];
        tempFront[0][2] = cubeDown[0][2];// RÎ©¥Ïùò ÏòÜÎ©¥ - FÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempFront[1][2] = cubeDown[1][2];
        tempFront[2][2] = cubeDown[2][2];
        tempDown[0][2] = cubeBack[2][0];// RÎ©¥Ïùò ÏòÜÎ©¥ - DÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempDown[1][2] = cubeBack[1][0];
        tempDown[2][2] = cubeBack[0][0];
        tempBack[0][0] = cubeUp[2][2]; // RÎ©¥Ïùò ÏòÜÎ©¥ - BÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempBack[1][0] = cubeUp[1][2];
        tempBack[2][0] = cubeUp[0][2];
        copyAtoB(tempRight, cubeRight);// Î∞îÎÄê ÏûÑÏãúÎ≥ÄÏàòÎ•º cubeÏóê Î≥µÏÇ¨
        copyAtoB(tempUp, cubeUp);
        copyAtoB(tempFront, cubeFront);
        copyAtoB(tempDown, cubeDown);
        copyAtoB(tempBack, cubeBack);
    }

    public void whenRDot(char[][] tempRight, char[][] tempUp, char[][] tempFront, char[][] tempDown, char[][] tempBack) {
        System.out.println("R' : Ïò§Î•∏Ï™Ω Î©¥ÏùÑ Î∞òÏãúÍ≥ÑÎ∞©Ìñ•ÏúºÎ°ú 1/4 ÌöåÏ†Ñ");
        copyAtoB(cubeRight, tempRight);// ÏûÑÏãúÎ≥ÄÏàòÏóê cube ÎÇ¥Ïö© Î≥µÏÇ¨
        copyAtoB(cubeUp, tempUp);
        copyAtoB(cubeFront, tempFront);
        copyAtoB(cubeDown, tempDown);
        copyAtoB(cubeBack, tempBack);
        counterClockWise(tempRight, cubeRight);// RÎ©¥ Î∞òÏãúÍ≥ÑÎ∞©Ìñ• 1/4 ÌöåÏ†Ñ
        tempUp[0][2] = cubeBack[2][0];// RÎ©¥Ïùò ÏòÜÎ©¥ - UÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempUp[1][2] = cubeBack[1][0];
        tempUp[2][2] = cubeBack[0][0];
        tempFront[0][2] = cubeUp[0][2]; // RÎ©¥Ïùò ÏòÜÎ©¥ - FÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempFront[1][2] = cubeUp[1][2];
        tempFront[2][2] = cubeUp[2][2];
        tempDown[0][2] = cubeFront[0][2];// RÎ©¥Ïùò ÏòÜÎ©¥ - DÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempDown[1][2] = cubeFront[1][2];
        tempDown[2][2] = cubeFront[2][2];
        tempBack[0][0] = cubeDown[2][2];// RÎ©¥Ïùò ÏòÜÎ©¥ - BÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempBack[1][0] = cubeDown[1][2];
        tempBack[2][0] = cubeDown[0][2];
        copyAtoB(tempRight, cubeRight);// Î∞îÎÄê ÏûÑÏãúÎ≥ÄÏàòÎ•º cubeÏóê Î≥µÏÇ¨
        copyAtoB(tempUp, cubeUp);
        copyAtoB(tempFront, cubeFront);
        copyAtoB(tempDown, cubeDown);
        copyAtoB(tempBack, cubeBack);
    }

    public void whenB(char[][] tempBack, char[][] tempUp, char[][] tempLeft, char[][] tempRight, char[][] tempDown) {
        System.out.println("B : Îí∑Î©¥ÏùÑ ÏãúÍ≥ÑÎ∞©Ìñ•ÏúºÎ°ú 1/4 ÌöåÏ†Ñ");
        copyAtoB(cubeBack, tempBack);// ÏûÑÏãúÎ≥ÄÏàòÏóê cube ÎÇ¥Ïö© Î≥µÏÇ¨
        copyAtoB(cubeUp, tempUp);
        copyAtoB(cubeLeft, tempLeft);
        copyAtoB(cubeRight, tempRight);
        copyAtoB(cubeDown, tempDown);
        clockWise(tempBack, cubeBack);// BÎ©¥ ÏãúÍ≥ÑÎ∞©Ìñ• 1/4 ÌöåÏ†Ñ
        tempUp[0][0] = cubeRight[0][2];// BÎ©¥Ïùò ÏòÜÎ©¥ - UÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempUp[0][1] = cubeRight[1][2];
        tempUp[0][2] = cubeRight[2][2];
        tempLeft[0][0] = cubeUp[0][2];// BÎ©¥Ïùò ÏòÜÎ©¥ - LÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempLeft[1][0] = cubeUp[0][1];
        tempLeft[2][0] = cubeUp[0][0];
        tempRight[0][2] = cubeDown[2][2]; // BÎ©¥Ïùò ÏòÜÎ©¥ - RÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempRight[1][2] = cubeDown[2][1];
        tempRight[2][2] = cubeDown[2][0];
        tempDown[2][0] = cubeLeft[0][0];// BÎ©¥Ïùò ÏòÜÎ©¥ - DÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempDown[2][1] = cubeLeft[1][0];
        tempDown[2][2] = cubeLeft[2][0];
        copyAtoB(tempBack, cubeBack);// Î∞îÎÄê ÏûÑÏãúÎ≥ÄÏàòÎ•º cubeÏóê Î≥µÏÇ¨
        copyAtoB(tempUp, cubeUp);
        copyAtoB(tempLeft, cubeLeft);
        copyAtoB(tempRight, cubeRight);
        copyAtoB(tempDown, cubeDown);
    }

    public void whenBDot(char[][] tempBack, char[][] tempUp, char[][] tempLeft, char[][] tempRight, char[][] tempDown) {
        System.out.println("B' : Îí∑Î©¥ÏùÑ Î∞òÏãúÍ≥ÑÎ∞©Ìñ•ÏúºÎ°ú 1/4 ÌöåÏ†Ñ");
        copyAtoB(cubeBack, tempBack);
        copyAtoB(cubeUp, tempUp);
        copyAtoB(cubeLeft, tempLeft);
        copyAtoB(cubeRight, tempRight);// ÏûÑÏãúÎ≥ÄÏàòÏóê cube ÎÇ¥Ïö© Î≥µÏÇ¨
        copyAtoB(cubeDown, tempDown);
        counterClockWise(tempBack, cubeBack);// BÎ©¥ Î∞òÏãúÍ≥ÑÎ∞©Ìñ• 1/4 ÌöåÏ†Ñ
        tempUp[0][0] = cubeLeft[2][0];// BÎ©¥Ïùò ÏòÜÎ©¥ - UÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempUp[0][1] = cubeLeft[1][0];
        tempUp[0][2] = cubeLeft[0][0];
        tempLeft[0][0] = cubeDown[2][0]; // BÎ©¥Ïùò ÏòÜÎ©¥ - LÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempLeft[1][0] = cubeDown[2][1];
        tempLeft[2][0] = cubeDown[2][2];
        tempRight[0][2] = cubeUp[0][0];// BÎ©¥Ïùò ÏòÜÎ©¥ - RÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempRight[1][2] = cubeUp[0][1];
        tempRight[2][2] = cubeUp[0][2];
        tempDown[2][0] = cubeRight[2][2];// BÎ©¥Ïùò ÏòÜÎ©¥ - DÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempDown[2][1] = cubeRight[1][2];
        tempDown[2][2] = cubeRight[0][2];
        copyAtoB(tempBack, cubeBack);// Î∞îÎÄê ÏûÑÏãúÎ≥ÄÏàòÎ•º cubeÏóê Î≥µÏÇ¨
        copyAtoB(tempUp, cubeUp);
        copyAtoB(tempLeft, cubeLeft);
        copyAtoB(tempRight, cubeRight);
        copyAtoB(tempDown, cubeDown);
    }

    public void whenD(char[][] tempDown, char[][] tempLeft, char[][] tempFront, char[][] tempRight, char[][] tempBack) {
        System.out.println("D : ÏïÑÎû´Î©¥ÏùÑ ÏãúÍ≥ÑÎ∞©Ìñ•ÏúºÎ°ú 1/4 ÌöåÏ†Ñ");
        copyAtoB(cubeDown, tempDown);// ÏûÑÏãúÎ≥ÄÏàòÏóê cube ÎÇ¥Ïö© Î≥µÏÇ¨
        copyAtoB(cubeLeft, tempLeft);
        copyAtoB(cubeFront, tempFront);
        copyAtoB(cubeRight, tempRight);
        copyAtoB(cubeBack, tempBack);
        clockWise(tempDown, cubeDown);// DÎ©¥ ÏãúÍ≥ÑÎ∞©Ìñ• 1/4 ÌöåÏ†Ñ
        tempLeft[2][0] = cubeBack[2][0];// DÎ©¥Ïùò ÏòÜÎ©¥ - LÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempLeft[2][1] = cubeBack[2][1];
        tempLeft[2][2] = cubeBack[2][2];
        tempFront[2][0] = cubeLeft[2][0];// DÎ©¥Ïùò ÏòÜÎ©¥ - FÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempFront[2][1] = cubeLeft[2][1];
        tempFront[2][2] = cubeLeft[2][2];
        tempRight[2][0] = cubeFront[2][0]; // DÎ©¥Ïùò ÏòÜÎ©¥ - RÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempRight[2][1] = cubeFront[2][1];
        tempRight[2][2] = cubeFront[2][2];
        tempBack[2][0] = cubeRight[2][0];// DÎ©¥Ïùò ÏòÜÎ©¥ - BÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempBack[2][1] = cubeRight[2][1];
        tempBack[2][2] = cubeRight[2][2];
        copyAtoB(tempDown, cubeDown);// Î∞îÎÄê ÏûÑÏãúÎ≥ÄÏàòÎ•º cubeÏóê Î≥µÏÇ¨
        copyAtoB(tempLeft, cubeLeft);
        copyAtoB(tempFront, cubeFront);
        copyAtoB(tempRight, cubeRight);
        copyAtoB(tempBack, cubeBack);
    }

    public void whenDDot(char[][] tempDown, char[][] tempLeft, char[][] tempFront, char[][] tempRight, char[][] tempBack) {
        System.out.println("D' : ÏïÑÎû´Î©¥ÏùÑ Î∞òÏãúÍ≥ÑÎ∞©Ìñ•ÏúºÎ°ú 1/4 ÌöåÏ†Ñ");
        copyAtoB(cubeDown, tempDown);// ÏûÑÏãúÎ≥ÄÏàòÏóê cube ÎÇ¥Ïö© Î≥µÏÇ¨
        copyAtoB(cubeLeft, tempLeft);
        copyAtoB(cubeFront, tempFront);
        copyAtoB(cubeRight, tempRight);
        copyAtoB(cubeBack, tempBack);
        counterClockWise(tempDown, cubeDown);// DÎ©¥ Î∞òÏãúÍ≥ÑÎ∞©Ìñ• 1/4 ÌöåÏ†Ñ
        tempLeft[2][0] = cubeFront[2][0]; // DÎ©¥Ïùò ÏòÜÎ©¥ - LÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempLeft[2][1] = cubeFront[2][1];
        tempLeft[2][2] = cubeFront[2][2];
        tempFront[2][0] = cubeRight[2][0];// DÎ©¥Ïùò ÏòÜÎ©¥ - FÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempFront[2][1] = cubeRight[2][1];
        tempFront[2][2] = cubeRight[2][2];
        tempRight[2][0] = cubeBack[2][0];// DÎ©¥Ïùò ÏòÜÎ©¥ - RÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempRight[2][1] = cubeBack[2][1];
        tempRight[2][2] = cubeBack[2][2];
        tempBack[2][0] = cubeLeft[2][0];// DÎ©¥Ïùò ÏòÜÎ©¥ - BÎ©¥ Î≥ÄÍ≤ΩÏÇ¨Ìï≠
        tempBack[2][1] = cubeLeft[2][1];
        tempBack[2][2] = cubeLeft[2][2];
        copyAtoB(tempDown, cubeDown);// Î∞îÎÄê ÏûÑÏãúÎ≥ÄÏàòÎ•º cubeÏóê Î≥µÏÇ¨
        copyAtoB(tempLeft, cubeLeft);
        copyAtoB(tempFront, cubeFront);
        copyAtoB(tempRight, cubeRight);
        copyAtoB(tempBack, cubeBack);
    }
} // class

